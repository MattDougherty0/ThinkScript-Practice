#HINT: This study plots arrows and/or vertical lines on the chart on past earnings dates, and includes visual and audible alerts -- label + sound today if earnings BMO tomorrow morning, label + sound today if earnings AMC today, or label + sound today if earnings during market hours today. \n\n It also includes the MMM or expected move on earnings announcement expressed in dollars and percent.


# input allows you to create fields in the Edit Studies box to make it easy for anyone using your custom Study to make changes without need to alter the ThinkScript code.
input Show_Past_Earnings_arrow = yes;
input Show_Past_Earnings_line = yes;
input Label_Color_Choice = {"magenta", "green", "pink", "cyan", default "orange", "red", "blue", "gray", "violet"};

# def allows you to teach ThinkScript new words to save you time and typing by using the new "words" later in the code
# AddVerticalLine requires (1) condition for line to appear, (2) words and/or data you want to appear on the vertical line (put text and spaces between quotation marks and def "words" with plus sign + between items you want to appear on the vertical line), (3) desired color, and (4) type of line.
# HUGE ... VERY HUGE HINT: top right of this ThinkScript box, click on the Inspector oval, then click on a line of code to make it faster and easier to make changes to that line of code.
# AddLabel with a condition at the beginning instead of the word YES will cause the label to appear when condition is met and be hidden when condition not being met.  When creating a label that ONLY appears when codition is met -- visual alert -- beginning of Alert line could be just the condition, condition == 1, or if condition then yes else no
# Alert creats an audible alert when condition is met.  Alert line requires condition, words you want to appear in the message center when alert triggers, frequency of sound should condition reappear in the same bar, and sound you want to hear.

def isBefore = HasEarnings(EarningTime.BEFORE_MARKET);
AddVerticalLine(isBefore and Show_Past_Earnings_Line , "     Earnings Before Market Open ", Color.DARK_ORANGE, Curve.LONG_DASH);
AddLabel(isBefore[-1], "EARNINGS before market open TOMORROW", color.BLUE);
Alert(isBefore[-1], "EARNINGS before market open TOMORROW", Alert.BAR, Sound.RING);

def isAfter = HasEarnings(EarningTime.AFTER_MARKET);
AddVerticalLine(isAfter and Show_Past_Earnings_Line , "     Earnings After Market Close ", Color.DARK_ORANGE, Curve.LONG_DASH);
AddLabel(isAfter, "EARNINGS after market close TODAY", color.BLUE);
Alert(isAfter, "EARNINGS after market close TODAY", Alert.BAR, Sound.RING);

def isDuringOrUnspecified = HasEarnings() and !isBefore and !isAfter;
AddVerticalLine(isDuringOrUnspecified and Show_Past_Earnings_Line , "          Earnings Date ", Color.DARK_ORANGE, Curve.LONG_DASH);
AddLabel(isDuringOrUnspecified, "EARNINGS TODAY", color.BLUE);
Alert(isDuringOrUnspecified, "EARNINGS TODAY", Alert.BAR, Sound.RING);

def MMMpercent = GetMarketMakerMove() / close(period = aggregationPeriod.DAY);

AddLabel(if isBefore then yes else if isAfter then yes else if isDuringOrUnspecified then yes else no, "Market Maker Move: " + GetMarketMakerMove() + "  " + AsPercent(MMMpercent), GetColor(Label_Color_Choice));


# plot tells ThinkScript what information you want to show.  The next 3 lines tell ThinkScript how you want the plot information to appear.
plot Past_Earnings_Arrows = (isBefore and Show_Past_Earnings_arrow) or (isAfter and Show_Past_Earnings_arrow) or (isDuringOrUnspecified and Show_Past_Earnings_arrow);
Past_Earnings_Arrows.SetPaintingStrategy(PaintingStrategy.BOOLEAN_ARROW_UP);
Past_Earnings_Arrows.SetDefaultColor(color.BLUE);
Past_Earnings_Arrows.SetLineWeight(5);


# Market Maker Move 

input LineOnExpansion = yes;

def PrevClose = close(period = AggregationPeriod.DAY)[1];
def MMM = if IsNaN(GetMarketMakerMove()) 
          then MMM[1] 
          else GetMarketMakerMove();

def bar = if IsNaN(close + MMM) 
             then if LineOnExpansion
                     then bar[1]
                     else Double.NaN
             else BarNumber();
def ThisBar = HighestAll(bar);
def barCount   = if bar == ThisBar 
                 then (close + MMM)
                 else Double.NaN;

plot upper = if ThisBar <= bar
           then HighestAll(barCount)
           else Double.NaN;
upper.SetDefaultColor(Color.BLUE);
upper.SetPaintingStrategy(PaintingStrategy.HORIZONTAL);
upper.SetLineWeight(3);


def bar2 = if IsNaN(close - MMM) 
             then if LineOnExpansion
                     then bar[1]
                     else Double.NaN
             else BarNumber();
def ThisBar2 = HighestAll(bar);
def barCount2   = if bar == ThisBar 
                 then (close - MMM)
                 else Double.NaN;

plot lower = if ThisBar2 <= bar2
           then HighestAll(barCount2)
           else Double.NaN;
lower.SetDefaultColor(Color.BLUE);
lower.SetPaintingStrategy(PaintingStrategy.HORIZONTAL);
lower.SetLineWeight(3);


def StockPrice = close;
def condition = GetMarketMakerMove();

AddCloud(lower, upper, Color.CYAN, Color.CYAN);

AddChartBubble(bar == ThisBar, close(period = aggregationPeriod.DAY) + GetMarketMakerMove(), "MMM range HIGH: " + round(upper, 2), Color.LIGHT_GRAY, yes);

AddChartBubble(bar == ThisBar2, close(period = aggregationPeriod.DAY) - GetMarketMakerMove(), "MMM range LOW: " + round(lower, 2), Color.LIGHT_GRAY, no);


